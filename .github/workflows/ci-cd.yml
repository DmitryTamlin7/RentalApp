name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:15
        env:
          POSTGRES_DB: rentaldb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Soadsvanpjz228123
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U rental"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Build with Gradle
        run: ./gradlew clean build --no-daemon

      - name: Run application
        run: ./gradlew bootRun &

      - name: Wait for server
        run: |
          echo "Waiting for Spring Boot to start..."
          sleep 20


      - name:  Wait for server to start
        run: |
          echo "Waiting for the server..."
          for i in {1..30}; do
            if curl -s http://localhost:8080/actuator/health | grep -q '"status":"UP"'; then
              echo " Spring Boot is UP"
              exit 0
            fi
            sleep 3
          done
          echo " Server did not start in time"
          exit 1

      - name:  Check endpoints
        run: |
          endpoints=(/api/users /api/properties /api/bookings)
          for endpoint in "${endpoints[@]}"; do
            echo "Checking $endpoint ..."
            response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080$endpoint)
            if [ "$response" = "200" ]; then
              echo " $endpoint works (HTTP 200)"
            else
              echo " $endpoint failed (HTTP $response)"
              exit 1
            fi
          done